
def base64(message):
    asciiencoding = [['00100000', ' '],
['00100001', '!'],
['00100010', '"'],
['00100011', '#'],
['00100100', '$'],
['00100101', '%'],
['00100110', '&'],
['00100111', '"'],
['00101000', '('],
['00101001', ')'],
['00101010', '*'],
['00101011', '+'],
['00101100', ','],
['00101101', '-'],
['00101110', '.'],
['00101111', '/'],
['0110000,', '0'],
['00110001', '1'],
['00110010', '2'],
['00110011', '3'],
['00110100', '4'],
['00110101', '5'],
['00110110', '6'],
['00110111', '7'],
['00111000', '8'],
['00111001', '9'],
['00111010', ':'],
['00111011', ';'],
['00111100', '<'],
['00111101', '='],
['00111110', '>'],
['00111111', '?'],
['01000000', '`'],
['01000001', 'A'],
['01000010', 'B'],
['01000011', 'C'],
['01000100', 'D'],
['01000101', 'E'],
['01000110', 'F'],
['01000111', 'G'],
['01001000', 'H'],
['01001001', 'I'],
['01001010', 'J'],
['01001011', 'K'],
['01001100', 'L'],
['01001101', 'M'],
['01001110', 'N'],
['01001111', 'O'],
['01010000', 'P'],
['01010001', 'Q'],
['01010010', 'R'],
['01010011', 'S'],
['01010100', 'T'],
['01010101', 'U'],
['01010110', 'V'],
['01010111', 'W'],
['01011000', 'X'],
['01011001', 'Y'],
['01011010', 'Z'],
['01011011', '['],
['01011100', "\\"],
['01011101', ']'],
['01011110', '^'],
['01011111', '_'],
['01100000', '@'],
['01100001', 'a'],
['01100010', 'b'],
['01100011', 'c'],
['01100100', 'd'],
['01100101', 'e'],
['01100110', 'f'],
['01100111', 'g'],
['01101000', 'h'],
['01101001', 'i'],
['01101010', 'j'],
['01101011', 'k'],
['01101100', 'l'],
['01101101', 'm'],
['01101110', 'n'],
['01101111', 'o'],
['01110000', 'p'],
['01110001', 'q'],
['01110010', 'r'],
['01110011', 's'],
['01110100', 't'],
['01110101', 'u'],
['01110110', 'v'],
['01110111', 'w'],
['01111000', 'x'],
['01111001', 'y'],
['01111010', 'z'],
['01111011', '{'],
['01111100', '|'],
['01111101', '}'],
['01111110', '~']]
    base64encoding = [["000000",'A'],
["000001",'B'],
["000010",'C'],
["000011",'D'],
["000100",'E'],
["000101",'F'],
["000110",'G'],
["000111",'H'],
["001000",'I'],
["001001",'J'],
["001010",'K'],
["001011",'L'],
["001100",'M'],
["001101",'N'],
["001110",'O'],
["001111",'P'],
["010000",'Q'],
["010001",'R'],
["010010",'S'],
["010011",'T'],
["010100",'U'],
["010101",'V'],
["010110",'W'],
["010111",'X'],
["011000",'Y'],
["011001",'Z'],
["011010",'a'],
["011011",'b'],
["011100",'c'],
["011101",'d'],
["011110",'e'],
["011111",'f'],
['100000','g'],
['100001','h'],
['100010','i'],
['100011','j'],
['100100','k'],
['100101','l'],
['100110','m'],
['100111','n'],
['101000','o'],
['101001','p'],
['101010','q'],
['101011','r'],
['101100','s'],
['101101','t'],
['101110','u'],
['101111','v'],
['110000','w'],
['110001','x'],
['110010','y'],
['110011','z'],
['110100','0'],
['110101','1'],
['110110','2'],
['110111','3'],
['111000','4'],
['111001','5'],
['111010','6'],
['111011','7'],
['111100','8'],
['111101','9'],
['111110','+'],
['111111','/']]
    eord = input("Are you encoding or decoding? (E/D) ")
    if eord == "E":
        binarymessage = ""
        binary = ""
        base64message = ""
        base64length = 0
        for x in range(len(message)):
            for y in range(len(asciiencoding)):
                if message[x] == asciiencoding[y][1]:
                    binarymessage += str(asciiencoding[y][0]) + " "
                    binary += str(asciiencoding[y][0])
        print("Binary Encoding: " + binarymessage)
        if len(binary) % 6 != 0:
            binary += ((len(binary) % 6) * "0")
        for i in range(int(len(binary)/6)):
            for m in range(len(base64encoding)):
                if binary[0:6] == base64encoding[m][0]:
                    base64message += base64encoding[m][1]
                    binary = binary[6:]
        print("Base 64: " + base64message)
    elif eord == "D":
        binarymessage = ""
        ptmessage = ""
        for x in range(len(message)):
            for y in range(len(base64encoding)):
                if message[x] == base64encoding[y][1]:
                    binarymessage += str(base64encoding[y][0])
        if (len(binarymessage))%6 != 0:
            binarymessage[0:len(binarymessage)-len(binarymessage)%6]
        for n in range(int(len(binarymessage)/6)):
            for m in range(len(asciiencoding)):
                if binarymessage[0:8] == asciiencoding[m][0]:
                    ptmessage += asciiencoding[m][1]
                    binarymessage = binarymessage[8:]
        print("Plaintext Message: " + ptmessage)
base64(input("What do you want to encode/decode into Base 64? "))
